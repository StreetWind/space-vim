!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$LANG	/media/tool/work/vimconfig/layers/+misc/chinese/config.vim	/^  let $LANG = 'zh_CN.UTF-8'$/;"	v
$LANG	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  let $LANG = 'en_US'$/;"	v
+	/media/tool/work/vimconfig/layers/+distributions/better-defaults/config.vim	/^  noremap + :Bigger<CR>$/;"	m
-	/media/tool/work/vimconfig/layers/+distributions/better-defaults/config.vim	/^  noremap - :Smaller<CR>$/;"	m
/	/media/tool/work/vimconfig/layers/+distributions/better-defaults/config.vim	/^      map \/  <Plug>(incsearch-forward)$/;"	m
<BS>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><BS> deoplete#smart_close_popup()."\\<C-h>"$/;"	m
<BS>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><BS> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-Tab>	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^imap   <C-Tab>  <C-O>:tabnext<CR>$/;"	m
<C-Tab>	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^map    <C-Tab>  :tabnext<CR>$/;"	m
<C-c>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap  <C-c> :call CscopeFind('c', expand('<cword>'))<CR>$/;"	m
<C-d>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap  <C-d> :call CscopeFind('d', expand('<cword>'))<CR>$/;"	m
<C-e>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap  <C-e> :call CscopeFind('e', expand('<cword>'))<CR>$/;"	m
<C-f>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap  <C-f> :call CscopeFind('f', expand('<cword>'))<CR>$/;"	m
<C-g>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><C-g>     deoplete#undo_completion()$/;"	m
<C-g>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><C-g>     neocomplete#undo_completion()$/;"	m
<C-g>g	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap  <C-g>g :call CscopeFind('i', expand('<cword>'))<CR>$/;"	m
<C-h>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><C-h> deoplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-h>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><C-h> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-j>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap  <C-j> :call CscopeFind('g', expand('<cword>'))<CR> $/;"	m
<C-l>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><C-l>     deoplete#complete_common_string()$/;"	m
<C-l>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><C-l>     neocomplete#complete_common_string()$/;"	m
<C-p>	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  nnoremap <C-p> :CtrlP<CR>$/;"	m
<C-s>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap  <C-s> :call CscopeFnd('s', expand('<cword>'))<CR>$/;"	m
<C-t>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap  <C-t> :call CscopeFind('t', expand('<cword>'))<CR>$/;"	m
<CR>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>$/;"	m
<CR>	/media/tool/work/vimconfig/layers/+programming/code-snippets/config.vim	/^  inoremap <expr> <CR> pumvisible() ? "\\<C-R>=ExpandSnippetOrCarriageReturn()\\<CR>" : "\\<CR>"$/;"	m
<F20>	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  nmap <F20> <Plug>MoveLineDown$/;"	m
<F20>	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  vmap <F20> <Plug>MoveBlockDown$/;"	m
<F21>	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  nmap <F21> <Plug>MoveLineUp$/;"	m
<F21>	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  vmap <F21> <Plug>MoveBlockUp$/;"	m
<F4>	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  inoremap <F4> <ESC>:NERDTreeToggle<CR>$/;"	m
<F4>	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  nnoremap <F4> :NERDTreeToggle<CR>$/;"	m
<F5>	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  nnoremap <F5> :call spacevim#util#CompileAndRun()<CR>$/;"	m
<F6>	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  inoremap <F6> <ESC>:TagbarToggle<CR>$/;"	m
<F6>	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  nnoremap <F6> :TagbarToggle<CR>$/;"	m
<F8>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^  nnoremap <F8> :TagbarToggle<CR>$/;"	m
<F9>	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^nnoremap <F9> :call <SID>autotagsconfig()<CR>$/;"	m
<Leader>;;	/media/tool/work/vimconfig/layers/+programming/editing/config.vim	/^  nmap <Leader>;; <Plug>NERDCommenterToggle$/;"	m
<Leader>;;	/media/tool/work/vimconfig/layers/+programming/editing/config.vim	/^  omap <Leader>;; <Plug>NERDCommenterToggle$/;"	m
<Leader>;;	/media/tool/work/vimconfig/layers/+programming/editing/config.vim	/^  vmap <Leader>;; <Plug>NERDCommenterToggle$/;"	m
<Leader><Leader>	/media/tool/work/vimconfig/layers/+vim/better-motion/config.vim	/^map <Leader><Leader> <Plug>(easymotion-prefix)$/;"	m
<Leader>?	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nmap <Leader>? <plug>(fzf-maps-n)$/;"	m
<Leader>?	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  omap <Leader>? <plug>(fzf-maps-o)$/;"	m
<Leader>a&	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>a& :Tabularize \/&<CR>$/;"	m
<Leader>a&	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  vmap <Leader>a& :Tabularize \/&<CR>$/;"	m
<Leader>a,	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>a, :Tabularize \/,<CR>$/;"	m
<Leader>a,	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  vmap <Leader>a, :Tabularize \/,<CR>$/;"	m
<Leader>a,,	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>a,, :Tabularize \/,\\zs<CR>$/;"	m
<Leader>a,,	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  vmap <Leader>a,, :Tabularize \/,\\zs<CR>$/;"	m
<Leader>a:	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>a: :Tabularize \/:<CR>$/;"	m
<Leader>a:	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  vmap <Leader>a: :Tabularize \/:<CR>$/;"	m
<Leader>a::	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>a:: :Tabularize \/:\\zs<CR>$/;"	m
<Leader>a::	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  vmap <Leader>a:: :Tabularize \/:\\zs<CR>$/;"	m
<Leader>a<Bar>	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>a<Bar> :Tabularize \/<Bar><CR>$/;"	m
<Leader>a<Bar>	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  vmap <Leader>a<Bar> :Tabularize \/<Bar><CR>$/;"	m
<Leader>a=	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>a= :Tabularize \/^[^=]*\\zs=<CR>$/;"	m
<Leader>a=	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  vmap <Leader>a= :Tabularize \/^[^=]*\\zs=<CR>$/;"	m
<Leader>a=>	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>a=> :Tabularize \/=><CR>$/;"	m
<Leader>a=>	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  vmap <Leader>a=> :Tabularize \/=><CR>$/;"	m
<Leader>ag	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>ag :Ag<CR>$/;"	m
<Leader>b?	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>b? :Buffers<CR>$/;"	m
<Leader>bb	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>bb :Buffers<CR>$/;"	m
<Leader>bh	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <silent><Leader>bh :Startify<CR>$/;"	m
<Leader>en	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  nmap <Leader>en <Plug>(ale_next)$/;"	m
<Leader>ep	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  nmap <Leader>ep <Plug>(ale_previous)$/;"	m
<Leader>f?	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>f? :Files<CR>$/;"	m
<Leader>f?	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>f? :LeaderfFile<CR>$/;"	m
<Leader>fL	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>fL :LeaderfLineAll<CR>$/;"	m
<Leader>fR	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Leader>fR :source $MYVIMRC<CR>$/;"	m
<Leader>fd	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  nnoremap <Leader>fd :NERDTreeFind<CR>$/;"	m
<Leader>ff	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>ff :Files ~<CR>$/;"	m
<Leader>ff	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>ff :LeaderfFile ~<CR>$/;"	m
<Leader>fl	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>fl :LeaderfLine<CR>$/;"	m
<Leader>fr	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>fr :LeaderfMru<CR>$/;"	m
<Leader>fr	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  nnoremap <Leader>fr :CtrlPMRU<CR>$/;"	m
<Leader>ft	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  nnoremap <Leader>ft :NERDTreeToggle<CR>$/;"	m
<Leader>gb	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gb :Gblame<CR>$/;"	m
<Leader>gc	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gc :Gcommit<CR>$/;"	m
<Leader>gd	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gd :Gdiff<CR>$/;"	m
<Leader>ge	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>ge :Gedit<CR>$/;"	m
<Leader>gg	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gg :SignifyToggle<CR>$/;"	m
<Leader>gi	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gi :Git add -p %<CR>$/;"	m
<Leader>gl	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gl :Glog<CR>$/;"	m
<Leader>gp	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gp :Git push<CR>$/;"	m
<Leader>gr	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gr :Gread<CR>$/;"	m
<Leader>gs	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gs :Gstatus<CR>$/;"	m
<Leader>gw	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gw :Gwrite<CR>$/;"	m
<Leader>gy	/media/tool/work/vimconfig/layers/+fun/goyo/config.vim	/^  nnoremap <Leader>gy :Goyo<CR>$/;"	m
<Leader>jJ	/media/tool/work/vimconfig/layers/+vim/better-motion/config.vim	/^nmap <Leader>jJ <Plug>(easymotion-overwin-f2)$/;"	m
<Leader>jj	/media/tool/work/vimconfig/layers/+vim/better-motion/config.vim	/^map  <Leader>jj <Plug>(easymotion-bd-f)$/;"	m
<Leader>jj	/media/tool/work/vimconfig/layers/+vim/better-motion/config.vim	/^nmap <Leader>jj <Plug>(easymotion-overwin-f)$/;"	m
<Leader>jl	/media/tool/work/vimconfig/layers/+vim/better-motion/config.vim	/^map <Leader>jl <Plug>(easymotion-bd-jk)$/;"	m
<Leader>jl	/media/tool/work/vimconfig/layers/+vim/better-motion/config.vim	/^nmap <Leader>jl <Plug>(easymotion-overwin-line)$/;"	m
<Leader>jw	/media/tool/work/vimconfig/layers/+vim/better-motion/config.vim	/^map  <Leader>jw <Plug>(easymotion-bd-w)$/;"	m
<Leader>jw	/media/tool/work/vimconfig/layers/+vim/better-motion/config.vim	/^nmap <Leader>jw <Plug>(easymotion-overwin-w)$/;"	m
<Leader>md	/media/tool/work/vimconfig/layers/+tools/tmux/config.vim	/^      nnoremap <Leader>md :CtrlPTmux c<cr>$/;"	m
<Leader>mf	/media/tool/work/vimconfig/layers/+tools/tmux/config.vim	/^      nnoremap <Leader>mf :CtrlPTmux b<cr>$/;"	m
<Leader>mi	/media/tool/work/vimconfig/layers/+tools/tmux/config.vim	/^      nnoremap <Leader>mi :CtrlPTmux ci<cr>$/;"	m
<Leader>mm	/media/tool/work/vimconfig/layers/+tools/tmux/config.vim	/^      nnoremap <Leader>mm :CtrlPTmux<cr>$/;"	m
<Leader>mw	/media/tool/work/vimconfig/layers/+tools/tmux/config.vim	/^      nnoremap <Leader>mw :CtrlPTmux w<cr>$/;"	m
<Leader>pr	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>pr :ProjectMru --tiebreak=end<cr>$/;"	m
<Leader>s	/media/tool/work/vimconfig/layers/+programming/editing/config.vim	/^  vmap <Leader>s :call SwoopMultiSelection()<CR>$/;"	m
<Leader>sm	/media/tool/work/vimconfig/layers/+programming/editing/config.vim	/^  nnoremap <Leader>sm :call SwoopMulti()<CR>$/;"	m
<Leader>ss	/media/tool/work/vimconfig/layers/+programming/editing/config.vim	/^  nnoremap <Leader>ss :call Swoop()<CR>$/;"	m
<Leader>tC	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Leader>tC :call spacevim#util#ToggleColorColumn()<CR>$/;"	m
<Leader>tc	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Leader>tc :call spacevim#util#ToggleCursorColumn()<CR>$/;"	m
<Leader>tg	/media/tool/work/vimconfig/layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>tg :GitGutterToggle<CR>$/;"	m
<Leader>ti	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  nnoremap <Leader>ti :IndentGuidesToggle<CR>$/;"	m
<Leader>ts	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  nnoremap <Leader>ts :ALEToggle<CR>$/;"	m
<Leader>ts	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  nnoremap <Leader>ts :SyntasticToggleMode<CR>$/;"	m
<Leader>tt	/media/tool/work/vimconfig/layers/+programming/programming/config.vim	/^  nnoremap <Leader>tt :TagbarToggle<CR>$/;"	m
<Leader>w?	/media/tool/work/vimconfig/layers/+tools/fzf/config.vim	/^  nnoremap <Leader>w? :Windows<CR>$/;"	m
<Leader>ww	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^nmap <Leader>ww <Plug>(choosewin)$/;"	m
<Leader>xa	/media/tool/work/vimconfig/layers/+vim/text-align/config.vim	/^  nmap <Leader>xa <Plug>(EasyAlign)$/;"	m
<Leader>xd	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Leader>xd :StripWhitespace<CR>$/;"	m
<LocalLeader>	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nmap <LocalLeader> [menu]$/;"	m
<M-Tab>	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^imap   <M-Tab>  <C-O>:tabprev<CR>$/;"	m
<M-Tab>	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^map    <M-Tab>  :tabprev<CR>$/;"	m
<S-Tab>	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <S-Tab> :bp<CR>$/;"	m
<TAB>	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  inoremap <expr><TAB>  pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
<Tab>	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Tab> :bn<CR>$/;"	m
?	/media/tool/work/vimconfig/layers/+distributions/better-defaults/config.vim	/^      map ?  <Plug>(incsearch-backward)$/;"	m
ALEGetError	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  function! ALEGetError()$/;"	f
ALEGetWarning	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  function! ALEGetWarning()$/;"	f
Bigger	/media/tool/work/vimconfig/layers/+distributions/better-defaults/config.vim	/^  command! Bigger  :let &guifont = substitute(&guifont, '\\d\\+$', '\\=submatch(0)+1', '')$/;"	c
BuildYCM	/media/tool/work/vimconfig/layers/+tools/ycmd/packages.vim	/^function! BuildYCM(info)$/;"	f
DirectoryOfThisScript	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^def DirectoryOfThisScript():$/;"	f	access:public
ExpandSnippetOrCarriageReturn	/media/tool/work/vimconfig/layers/+programming/code-snippets/config.vim	/^  function! ExpandSnippetOrCarriageReturn()$/;"	f
FlagsForFile	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f	access:public
GetCompilationInfoForFile	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f	access:public
IsHeaderFile	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^def IsHeaderFile( filename ):$/;"	f	access:public
MakeRelativePathsInFlagsAbsolute	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f	access:public
MyLastWindow	/media/tool/work/vimconfig/layers/+distributions/spacevim/config.vim	/^  function! MyLastWindow()$/;"	f
MyTabLine	/media/tool/work/vimconfig/layers/+distributions/spacevim/config.vim	/^function! MyTabLine()$/;"	f
Rtp	/media/tool/work/vimconfig/layers/+distributions/better-defaults/keybindings.vim	/^command! -bar -nargs=0 Rtp :call spacevim#util#Runtimepath()$/;"	c
SOURCE_EXTENSIONS	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
Smaller	/media/tool/work/vimconfig/layers/+distributions/better-defaults/config.vim	/^  command! Smaller :let &guifont = substitute(&guifont, '\\d\\+$', '\\=submatch(0)-1', '')$/;"	c
Source	/media/tool/work/vimconfig/core/autoload/spacevim.vim	/^function! s:Source(file)$/;"	f
[menu]	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nnoremap [menu] <Nop>$/;"	m
[menu]f	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nnoremap <silent>[menu]f :Unite -silent -winheight=20$/;"	m
[menu]m	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nnoremap <silent>[menu]m :Unite -silent -winheight=40 menu<CR>$/;"	m
[menu]p	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nnoremap <silent>[menu]p :Unite -silent$/;"	m
[menu]t	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nnoremap <silent>[menu]t :Unite -silent$/;"	m
[menu]u	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nnoremap <silent>[menu]u :Unite -silent$/;"	m
[menu]v	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nnoremap <silent>[menu]v :Unite -silent$/;"	m
[menu]x	/media/tool/work/vimconfig/layers/+completion/unite/config.vim	/^  nnoremap <silent>[menu]x :Unite -silent -winheight=20$/;"	m
assign_name	/media/tool/work/vimconfig/core/autoload/spacevim/layer.vim	/^function! s:assign_name()$/;"	f
autotagsconfig	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^function! s:autotagsconfig()$/;"	f
backup	/media/tool/work/vimconfig/install.sh	/^backup() {$/;"	f
check_dot_spacevim	/media/tool/work/vimconfig/core/autoload/spacevim.vim	/^function! s:check_dot_spacevim()$/;"	f
check_vim_plug	/media/tool/work/vimconfig/core/autoload/spacevim.vim	/^function! s:check_vim_plug(plug_path)$/;"	f
compilation_database_folder	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^compilation_database_folder = ''$/;"	v
config	/media/tool/work/vimconfig/core/autoload/spacevim.vim	/^function! s:config()$/;"	f
create_symlinks	/media/tool/work/vimconfig/install.sh	/^create_symlinks() {$/;"	f
database	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^  database = None$/;"	v
database	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
debug	/media/tool/work/vimconfig/install.sh	/^debug() {$/;"	f
define_command	/media/tool/work/vimconfig/core/autoload/spacevim.vim	/^function! s:define_command()$/;"	f
enter_full_screen	/media/tool/work/vimconfig/core/autoload/spacevim/gui.vim	/^function! s:enter_full_screen()$/;"	f
erlang_show_errors	/media/tool/work/vimconfig/layers/+lang/erlang/config.vim	/^let erlang_show_errors = 0$/;"	v
error	/media/tool/work/vimconfig/install.sh	/^error() {$/;"	f
exists	/media/tool/work/vimconfig/install.sh	/^exists() {$/;"	f
f	/media/tool/work/vimconfig/layers/generate_layers.py	/^f = open(os.path.expandvars('.\/LAYERS.md'), 'w')$/;"	v
filter_plugins	/media/tool/work/vimconfig/core/autoload/spacevim.vim	/^function! s:filter_plugins()$/;"	f
flags	/media/tool/work/vimconfig/layers/+tools/ycmd/global_conf.py	/^flags = [$/;"	v
g/	/media/tool/work/vimconfig/layers/+distributions/better-defaults/config.vim	/^      map g\/ <Plug>(incsearch-stay)$/;"	m
g:LINUX	/media/tool/work/vimconfig/init.vim	/^let g:LINUX = has('unix') && !has('macunix') && !has('win32unix')$/;"	v
g:MAC	/media/tool/work/vimconfig/init.vim	/^let g:MAC = has('macunix')$/;"	v
g:NERDSpaceDelims	/media/tool/work/vimconfig/layers/+programming/editing/config.vim	/^  let g:NERDSpaceDelims=1$/;"	v
g:NERDTreeAutoDeleteBuffer	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeAutoDeleteBuffer=1$/;"	v
g:NERDTreeDirArrowCollapsible	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeDirArrowCollapsible = '▼'$/;"	v
g:NERDTreeDirArrowExpandable	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeDirArrowExpandable = '►'$/;"	v
g:NERDTreeExactMatchHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error$/;"	v
g:NERDTreeExactMatchHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files$/;"	v
g:NERDTreeExactMatchHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExactMatchHighlightColor['.ipynb'] = s:lightPurple " sets the color for .ipynb files$/;"	v
g:NERDTreeExactMatchHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExactMatchHighlightColor['.py'] = s:red " sets the color for .ipynb files$/;"	v
g:NERDTreeExactMatchHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExactMatchHighlightColor['tex'] = s:rspec_red " sets the color of css files to blue$/;"	v
g:NERDTreeExtensionHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error$/;"	v
g:NERDTreeExtensionHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExtensionHighlightColor['css'] = s:blue " sets the color of css files to blue$/;"	v
g:NERDTreeExtensionHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExtensionHighlightColor['org'] = s:pink " sets the color of css files to blue$/;"	v
g:NERDTreeExtensionHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExtensionHighlightColor['python'] = s:green " sets the color of css files to blue$/;"	v
g:NERDTreeIgnore	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeIgnore=[$/;"	v
g:NERDTreeIndicatorMapCustom	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeIndicatorMapCustom = {$/;"	v
g:NERDTreeMinimalUI	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeMinimalUI=1$/;"	v
g:NERDTreePatternMatchHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error$/;"	v
g:NERDTreePatternMatchHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreePatternMatchHighlightColor['*.py$'] = s:red " sets the color for files ending with _spec.rb$/;"	v
g:NERDTreePatternMatchHighlightColor	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreePatternMatchHighlightColor['.*_spec\\.rb$'] = s:rspec_red " sets the color for files ending with _spec.rb$/;"	v
g:NERDTreeShowHidden	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeShowHidden=1$/;"	v
g:NERDTreeWinSize	/media/tool/work/vimconfig/layers/+tools/file-manager/config.vim	/^  let g:NERDTreeWinSize=25$/;"	v
g:Powerline_symbols	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:Powerline_symbols='fancy'$/;"	v
g:UltiSnipsExpandTrigger	/media/tool/work/vimconfig/layers/+programming/code-snippets/config.vim	/^  let g:UltiSnipsExpandTrigger = '<C-e>'$/;"	v
g:UltiSnipsJumpBackwardTrigger	/media/tool/work/vimconfig/layers/+programming/code-snippets/config.vim	/^  let g:UltiSnipsJumpBackwardTrigger = '<C-k>'$/;"	v
g:UltiSnipsJumpForwardTrigger	/media/tool/work/vimconfig/layers/+programming/code-snippets/config.vim	/^  let g:UltiSnipsJumpForwardTrigger = '<C-j>'$/;"	v
g:UltiSnipsListSnippets	/media/tool/work/vimconfig/layers/+programming/code-snippets/config.vim	/^  let g:UltiSnipsListSnippets = '<C-l>'$/;"	v
g:UltiSnipsSnippetDirectories	/media/tool/work/vimconfig/layers/+programming/code-snippets/config.vim	/^  let g:UltiSnipsSnippetDirectories=['UltiSnips']$/;"	v
g:UltiSnipsSnippetsDir	/media/tool/work/vimconfig/layers/+programming/code-snippets/config.vim	/^  let g:UltiSnipsSnippetsDir = [g:spacevim_dir.'\/private\/UltiSnips', g:spacevim_plug_home.'vim-snippets\/UltiSnips\/']$/;"	v
g:WINDOWS	/media/tool/work/vimconfig/init.vim	/^let g:WINDOWS = has('win32') || has('win64')$/;"	v
g:acp_enableAtStartup	/media/tool/work/vimconfig/layers/+completion/auto-completion/config.vim	/^  let g:acp_enableAtStartup = 0$/;"	v
g:airline#extensions#ale#error_symbol	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#ale#error_symbol = '•'$/;"	v
g:airline#extensions#ale#warning_symbol	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#ale#warning_symbol = '•'$/;"	v
g:airline#extensions#default#layout	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#default#layout = [$/;"	v
g:airline#extensions#default#section_truncate_width	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#default#section_truncate_width = {$/;"	v
g:airline#extensions#tabline#buffer_idx_mode	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#buffer_idx_mode = 1$/;"	v
g:airline#extensions#tabline#buffer_nr_format	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#buffer_nr_format = '%s:'$/;"	v
g:airline#extensions#tabline#buffer_nr_show	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#buffer_nr_show = 1$/;"	v
g:airline#extensions#tabline#enabled	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#enabled=1$/;"	v
g:airline#extensions#tabline#fnamecollapse	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#fnamecollapse = 1$/;"	v
g:airline#extensions#tabline#fnamemod	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#fnamemod = ':t'$/;"	v
g:airline#extensions#tabline#fnametruncate	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#fnametruncate = 0$/;"	v
g:airline#extensions#tabline#formatter	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'$/;"	v
g:airline#extensions#tagbar#enabled	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline#extensions#tagbar#enabled = 0$/;"	v
g:airline_theme	/media/tool/work/vimconfig/layers/+themes/airline/config.vim	/^  let g:airline_theme='violet'$/;"	v
g:ale_echo_msg_error_str	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^    let g:ale_echo_msg_error_str = 'Error'$/;"	v
g:ale_echo_msg_error_str	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^    let g:ale_echo_msg_error_str = '✹ Error'$/;"	v
g:ale_echo_msg_format	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  let g:ale_echo_msg_format = '[#%linter%#] %s [%severity%]'$/;"	v
g:ale_echo_msg_warning_str	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^    let g:ale_echo_msg_warning_str = 'Warning'$/;"	v
g:ale_echo_msg_warning_str	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^    let g:ale_echo_msg_warning_str = '⚠ Warning'$/;"	v
g:ale_enabled	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  let g:ale_enabled = 0$/;"	v
g:ale_linters	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  let g:ale_linters = {$/;"	v
g:ale_set_highlights	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  let g:ale_set_highlights = 0$/;"	v
g:ale_sign_error	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^    let g:ale_sign_error = '•'$/;"	v
g:ale_sign_error	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^    let g:ale_sign_error = emoji#for('boom')$/;"	v
g:ale_sign_warning	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^    let g:ale_sign_warning = '•'$/;"	v
g:ale_sign_warning	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^    let g:ale_sign_warning = emoji#for('small_orange_diamond')$/;"	v
g:ale_statusline_format	/media/tool/work/vimconfig/layers/+checkers/syntax-checking/config.vim	/^  let g:ale_statusline_format = ['E•%d', 'W•%d', 'OK']$/;"	v
g:autocscopepath	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^let g:autocscopepath =s:searchworkdir()$/;"	v
g:c_no_curly_error	/media/tool/work/vimconfig/layers/+lang/c-c++/config.vim	/^  let g:c_no_curly_error=1$/;"	v
g:cpp_class_scope_highlight	/media/tool/work/vimconfig/layers/+lang/c-c++/config.vim	/^  let g:cpp_class_scope_highlight = 1$/;"	v
g:csFileEx	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^let g:csFileEx = ['*.c','*.h']$/;"	v
g:cscope_open_location	/media/tool/work/vimconfig/layers/+tools/tags/config.vim	/^let g:cscope_open_location=0$/;"	v
g:ctrlp_by_filename	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_by_filename = 1$/;"	v
g:ctrlp_clear_cache_on_exit	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_clear_cache_on_exit=0  		" speed up by not removing clearing cache evertime$/;"	v
g:ctrlp_cmd	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_cmd = 'CtrlP'$/;"	v
g:ctrlp_custom_ignore	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_custom_ignore = {$/;"	v
g:ctrlp_follow_symlinks	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_follow_symlinks=1$/;"	v
g:ctrlp_map	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_map = '<c-p>'$/;"	v
g:ctrlp_match_func	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }$/;"	v
g:ctrlp_match_window_bottom	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_match_window_bottom = 0		" show the match window at the top of the screen$/;"	v
g:ctrlp_max_height	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_max_height = 10				" maxiumum height of match window$/;"	v
g:ctrlp_mruf_exclude	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_mruf_exclude = '\/tmp\/.*\\|\/temp\/.*'$/;"	v
g:ctrlp_mruf_max	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_mruf_max = 250 				" number of recently opened files$/;"	v
g:ctrlp_mruf_relative	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_mruf_relative = 1$/;"	v
g:ctrlp_regexp	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_regexp = 1$/;"	v
g:ctrlp_switch_buffer	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_switch_buffer = 'et'		" jump to a file if it's open already$/;"	v
g:ctrlp_use_caching	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^    let g:ctrlp_use_caching = 0$/;"	v
g:ctrlp_use_caching	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_use_caching = 1				" enable caching$/;"	v
g:ctrlp_user_command	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'$/;"	v
g:ctrlp_user_command	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^    let g:ctrlp_user_command = ['.git\/', 'git --git-dir=%s\/.git ls-files -oc --exclude-standard']$/;"	v
g:ctrlp_working_path_mode	/media/tool/work/vimconfig/layers/+vim/ctrlp/config.vim	/^  let g:ctrlp_working_path_mode = 'ra'	" search for nearest ancestor like .git, .hg, and the directory of the current file$/;"	v
